import cv2
import mediapipe as mp
import numpy as np

# Initialize MediaPipe Hands module
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils
hands = mp_hands.Hands(min_detection_confidence=0.5, min_tracking_confidence=0.5)

def recognize_gesture(hand_landmarks):
    """
    Recognizes gestures based on hand landmark positions.
    """
    landmarks = hand_landmarks.landmark

    # Get key points
    thumb_tip = landmarks[4]
    index_tip = landmarks[8]
    middle_tip = landmarks[12]
    ring_tip = landmarks[16]
    pinky_tip = landmarks[20]

    # Check if fingers are extended
    def is_finger_extended(tip, pip):
        return tip.y < pip.y  # Finger is extended if tip is above PIP joint

    thumb_extended = thumb_tip.x < landmarks[3].x  # Thumb should point left (for right hand)
    index_extended = is_finger_extended(index_tip, landmarks[6])
    middle_extended = is_finger_extended(middle_tip, landmarks[10])
    ring_extended = is_finger_extended(ring_tip, landmarks[14])
    pinky_extended = is_finger_extended(pinky_tip, landmarks[18])

    # Gesture Conditions
    if thumb_extended and not (index_extended or middle_extended or ring_extended or pinky_extended):
        return "Thumbs Up 👍"
    elif index_extended and middle_extended and not (ring_extended or pinky_extended):
        return "Victory ✌️"
    elif all([index_extended, middle_extended, ring_extended, pinky_extended]):
        return "Open Palm 🖐️"
    
    return "Unknown Gesture"

def identify_hand_parts(frame, hand_landmarks):
    """
    Identifies specific hand parts and labels them.
    """
    h, w, _ = frame.shape
    parts = {
        "Thumb": 4, "Index Finger": 8, "Middle Finger": 12, 
        "Ring Finger": 16, "Pinky": 20, "Wrist": 0
    }
    for name, idx in parts.items():
        x, y = int(hand_landmarks.landmark[idx].x * w), int(hand_landmarks.landmark[idx].y * h)
        cv2.putText(frame, name, (x, y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)

cap = cv2.VideoCapture(0)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = hands.process(rgb_frame)

    if results.multi_hand_landmarks:
        hand_count = 1  # Track hand number for display positioning
        for hand_landmarks in results.multi_hand_landmarks:
            mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)
            
            # Recognize gesture for each hand
            gesture = recognize_gesture(hand_landmarks)
            
            # Display hand number and gesture without overlapping
            cv2.putText(frame, f"Hand {hand_count}: {gesture}", (10, 50 + (hand_count * 30)), 
                        cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 255), 2)

            identify_hand_parts(frame, hand_landmarks)
            hand_count += 1  # Increment hand count for proper spacing

    cv2.imshow("Hand Gesture Recognition", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
